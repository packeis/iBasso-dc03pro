 # Based on https://github.com/walac/pyusb/blob/master/docs/tutorial.rst

import getopt
import sys
import usb.core

vendor_ibasso = 0x262a
product_dc03pro = 0x187e

def get_device(vendor, product):
    return usb.core.find(idVendor=vendor, idProduct=product)

def dump_cfg(dev):
    cfg = dev[0]
    intf = cfg[(0,0)]
    ep = intf[0]

    print("print ep")
    print(ep)
    print("print cfg")
    print(cfg)
    print("print intf")
    print(intf)

def hid_set_report(dev, report):
    """ Implements HID SetReport via USB control transfer """
    return dev.ctrl_transfer(
          0x21,  # REQUEST_TYPE_CLASS | RECIPIENT_INTERFACE | ENDPOINT_OUT
          9,     # SET_REPORT
          0x200, # "Vendor" Descriptor Type + 0 Descriptor Index
          0,     # USB interface Nr 0
          report,# the HID payload as a byte array -- e.g. from struct.pack()
          200    # timeout in ms
    )

def hid_get_report(dev):
    """ Implements HID GetReport via USB control transfer """
    return dev.ctrl_transfer(
          0xA1,  # REQUEST_TYPE_CLASS | RECIPIENT_INTERFACE | ENDPOINT_IN
          1,     # GET_REPORT
          0x200, # "Vendor" Descriptor Type + 0 Descriptor Index
          0,     # USB interface Nr 0
          32,    # max reply size
          200    # timeout in ms
    )

def dc03pro_report(dev, index):
    """ 
    Set DC03Pro Report.
    index | Setting
    ------+---------------------------------
        0 | D1 - Fast Roll Off 
        1 | D2 - Short Delay Slow Roll Off
        2 | D3 - Short Delay Fast Roll Off
        3 | D4 - Slow Roll Off
        4 | D5 - NOS
        5 | Gain Low
        6 | Gain Medium
        7 | Gain High
        8 | Turbo Off
        9 | Turbo On
    """
    labels = [
        "D1 - Fast Roll Off",
        "D2 - Short Delay Slow Roll Off",
        "D3 - Short Delay Fast Roll Off",
        "D4 - Slow Roll Off",
        "D5 - NOS",
        "Gain Low",
        "Gain Medium",
        "Gain High",
        "Turbo Off",
        "Turbo On"
    ]
    # report data is "reverse engineered" from Android UAC app
    reports = [
        # D1 - Fast Roll Off
        [0x11, 0x11, 0x88, 0x60, 0x00, 0x00, 0x05, 0x09, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00],
        [0x12, 0x11, 0x88, 0x62, 0x00, 0x00, 0x05, 0x09, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00],
        # D2 - Short Delay Slow Roll Off
        [0x11, 0x11, 0x88, 0x60, 0x00, 0x00, 0x05, 0x09, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00],
        [0x12, 0x11, 0x88, 0x62, 0x00, 0x00, 0x05, 0x09, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00],
        # D3 - Short Delay Fast Roll Off
        [0x11, 0x11, 0x88, 0x60, 0x00, 0x00, 0x05, 0x09, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00],
        [0x12, 0x11, 0x88, 0x62, 0x00, 0x00, 0x05, 0x09, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00],
        # D4 - Slow Roll Off
        [0x11, 0x11, 0x88, 0x60, 0x00, 0x00, 0x05, 0x09, 0x00, 0x00, 0x00, 0xC2, 0x00, 0x00, 0x00, 0x00],
        [0x12, 0x11, 0x88, 0x62, 0x00, 0x00, 0x05, 0x09, 0x00, 0x00, 0x00, 0xC2, 0x00, 0x00, 0x00, 0x00],
        # D5 - NOS
        [0x11, 0x11, 0x88, 0x60, 0x00, 0x00, 0x05, 0x09, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00],
        [0x12, 0x11, 0x88, 0x62, 0x00, 0x00, 0x05, 0x09, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00],
        # Gain Low
        [0x15, 0x11, 0x88, 0x60, 0x00, 0x00, 0x05, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x16, 0x11, 0x88, 0x62, 0x00, 0x00, 0x05, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        # Gain Medium
        [0x15, 0x11, 0x88, 0x60, 0x00, 0x00, 0x05, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00],
        [0x16, 0x11, 0x88, 0x62, 0x00, 0x00, 0x05, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00],
        # Gain High
        [0x15, 0x11, 0x88, 0x60, 0x00, 0x00, 0x05, 0x08, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00],
        [0x16, 0x11, 0x88, 0x62, 0x00, 0x00, 0x05, 0x08, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00],
        # Turbo Off
        [0x17, 0x11, 0x88, 0x60, 0x00, 0x00, 0x05, 0x0b, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00],
        [0x18, 0x11, 0x88, 0x62, 0x00, 0x00, 0x05, 0x0b, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00],
        # Turbo On
        [0x17, 0x11, 0x88, 0x60, 0x00, 0x00, 0x05, 0x0b, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00],
        [0x18, 0x11, 0x88, 0x62, 0x00, 0x00, 0x05, 0x0b, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00]
    ]
    print("Sending HID report: "+labels[index])
    buffer = reports[2*index]
    assert hid_set_report(dev, buffer) == len(buffer)
    buffer = reports[2*index+1]
    assert hid_set_report(dev, buffer) == len(buffer)
    
def usage():
    print("Usage: dc03pro [-d 1|2|3|4|5] [-g 1|2|3] [-t 0|1]")
    print("       -d sets digital filter of iBasso DC03PRO device to one of D1, D2, D3, D4 or D5")
    print("       -g sets gain to low (1), medium (2) or high (3)")
    print("       -t sets turbo mode either off (0) or on (1)")
    print("Filter selection, gain and turbo mode gets reset to default values once the device is unplugged")

def main(args):
    # Find our device - iBasso DC03Pro
    dev = get_device(vendor_ibasso, product_dc03pro)

    # Was it found?
    if dev is None:
        raise ValueError('Device not found')

    try:
        opts, args = getopt.getopt(sys.argv[1:], "d:g:t:")
    except getopt.GetoptError as err:
        print(err)
        usage()
        sys.exit(2)

    for o, a in opts:
        if o == "-d":
            a = int(a)
            if a in range(1,6):
                dc03pro_report(dev, a - 1)
            else:
                print("arg must be 1, 2, 3, 4 or 5")
        elif o == "-g":
            a = int(a)
            if a in range(1,4):
                dc03pro_report(dev, 4 + int(a))
            else:
                print("arg must 1, 2 or 3")
        elif o == "-t":
            a = int(a)
            if a in range(0,2):
                dc03pro_report(dev, 8 + int(a))
            else:
                print("arg must 0 or 1")
        else:
            usage()
            
if __name__ == "__main__":
    """
    Best seems to be -t0 (Turbo off) and -g3 (High Gain)
    No Cirrus Hump with -d5 (NOS Filter)
    """
    main(sys.argv)
